pipeline {
  agent any

  environment {
    // Replace these with your values
    ACR_LOGIN_SERVER = 'e2ecrdev.azurecr.io'   // <-- set your ACR login server
    IMAGE_NAME       = 'yonitest'                   // <-- set your image name

    DOCKER_BUILDKIT  = '1'

    // Secret text credential (you said you already added this)
    GDN_MDC_CLI_CLIENT_SECRET = credentials('gdn-client-secret')

    // Static values you asked to export (literal values)
    GDN_MDC_CLI_TENANT_ID    = 'dad46ef7-083d-488a-bd4b-8926fc7f83a1'
    GDN_MDC_CLI_CLIENT_ID    = '42e28c99-6d63-4202-b7fd-253687bab74a'
    DfdBackendServiceEnvironment = 'PPE'
    GDN_NUGET_SOURCE_FEED_OVERRIDE = 'https://pkgs.dev.azure.com/msdoustest/msdo/_packaging/msdotestfeed2/nuget/v3/index.json'
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1

  }

  stages {

stage('Install docker & rpm if needed') {
  steps {
    sh '''
      set -e

      echo "=== Checking docker CLI ==="
      if ! command -v docker >/dev/null 2>&1; then
        echo "Docker not found — installing..."

        # Debian dependencies
        apt-get update -y
        apt-get install -y ca-certificates curl gnupg lsb-release

        # Docker official repo
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/debian/gpg | \
          gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
          https://download.docker.com/linux/debian \
          $(lsb_release -cs) stable" \
          > /etc/apt/sources.list.d/docker.list

        apt-get update -y
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        # enable docker daemon if systemd available
        if command -v systemctl >/dev/null 2>&1; then
          systemctl enable --now docker || true
        fi

        # grant jenkins user (if exists)
        if id jenkins >/dev/null 2>&1; then
          usermod -aG docker jenkins || true
        fi
      else
        echo "Docker already installed."
      fi

      echo "=== Checking rpm ==="
      if ! command -v rpm >/dev/null 2>&1; then
        echo "rpm not found — installing..."
        apt-get update -y
        apt-get install -y rpm
      else
        echo "rpm already installed."
      fi
    '''
  }
}
    stage('Checkout') {
      steps {
        checkout scm
        sh 'git rev-parse --short=7 HEAD > .gitsha'
      }
    }

    stage('Env') {
            steps {
                sh 'printenv | grep GIT_'
            }
    }



    stage('Compute Tag & Build') {
      steps {
        script { env.IMAGE_TAG = readFile('.gitsha').trim() }
        sh '''
          echo "Building ${IMAGE_NAME}:${IMAGE_TAG}"
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile .
        '''
      }
    }

    stage('Download Defender Scanner') {
      steps {
        // ensure the binary is downloaded
        sh '''
          echo "Download Defender tool"
          curl -fsSL -o defender https://cli.dfd.security.stage.azure-test.net/public/latest/Defender_linux-x64
          chmod +x defender
        '''
      }
    }

    stage('Scan Image') {
      steps {
        // Export the variables so the scanner process sees them
        sh '''
          echo "Exporting environment variables for Defender scan..."
          export GDN_MDC_CLI_TENANT_ID=${GDN_MDC_CLI_TENANT_ID}
          export GDN_MDC_CLI_CLIENT_ID=${GDN_MDC_CLI_CLIENT_ID}
          export GDN_MDC_CLI_CLIENT_SECRET=${GDN_MDC_CLI_CLIENT_SECRET}
          export DfdBackendServiceEnvironment=${DfdBackendServiceEnvironment}
          export GDN_NUGET_SOURCE_FEED_OVERRIDE="${GDN_NUGET_SOURCE_FEED_OVERRIDE}"

          echo "Scanning image ${IMAGE_NAME}:${IMAGE_TAG}"
          ./defender scan image ${IMAGE_NAME}:${IMAGE_TAG} --scanner containers
        '''
      }
    }

    stage('Push to ACR') {
      steps {
        // Use withCredentials for username/password style credential
        withCredentials([usernamePassword(
          credentialsId: 'acr-creds',
          usernameVariable: 'ACR_USER',
          passwordVariable: 'ACR_PASS'
        )]) {
          sh '''
            echo "$ACR_PASS" | docker login ${ACR_LOGIN_SERVER} -u "$ACR_USER" --password-stdin
            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}
            docker logout ${ACR_LOGIN_SERVER} || true
          '''
        }
      }
    }
  }

  post {
    always {
      // cleanup to save disk
      sh 'docker image prune -f || true'
    }
  }
}
